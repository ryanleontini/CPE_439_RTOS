
#include "main.h"
#include <string.h>
#define F_CLK 4000000   // System clock is 4 MHz

UART_HandleTypeDef huart2;

void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);

void GPIO_Init(void);
void DMA_CPU_Init(void);
void Fill_Array(void);
void Clear_Array(void);
void DMA_Mem_Cpy(void);
void CPU_Copy(void);
void DMA_Copy(void);
void DMA_ADC_Init(void);
void ADC_Init(void);
void Start_New_ADC_Conversion(void);

void USART_Init(void);
void USART_Print(const char* message);
void USART_ESC_Code(const char* code);

uint16_t sourceArray[1000];
uint16_t destArray[1000];

int receivedFlag;
char receivedChar;

volatile uint16_t ADC_value = 0;	// global for interrupt access
volatile uint8_t  ADC_flag = 0;		// global for interrupt access

int dmaFlag = 0;
int adcCount = 0;

int main(void)
{
  __enable_irq();

  HAL_Init();

  SystemClock_Config();

  MX_GPIO_Init();
  MX_USART2_UART_Init();

  GPIO_Init();

  // MEM MODE
//  DMA_CPU_Init();
//  Fill_Array();

  // ADC MODE
  Clear_Array();
  DMA_ADC_Init();

  while (1)
  {
	  //DMA_Mem_Cpy();
  }
}

void ADC_Init(void) {
	ADC1->CR &= ~(ADC_CR_ADSTART);	// Disable ADSTART

	//-------------- CLOCK SETUP --------------//
	RCC->AHB2ENR |= (RCC_AHB2ENR_ADCEN); // ADC clock EN
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOAEN); // Enable GPIOA clock
	ADC123_COMMON->CCR = ((ADC123_COMMON->CCR & ~(ADC_CCR_CKMODE)) | ADC_CCR_CKMODE_0 ); // Set ADC to system CLK (AHB PSC set to SYS CLK)

	//-------------- ADC CALIBRATION --------------//
	// Ensure DEEPPWD=0, ADVREGEN=1 and that ADC voltage regulator startup time has elapsed. (From Manual)

	ADC1->CR &= ~(ADC_CR_DEEPPWD);
	ADC1->CR |= (ADC_CR_ADVREGEN);
	for (int i = 0; i<10000; i++) {}; // Delay ~20us to allow ADC voltage regulator startup.
	ADC1->CR &= ~(ADC_CR_ADEN | ADC_CR_ADCALDIF);	// ADC Not EN, ADC in Single Ended Mode.
	ADC1->CR |= ADC_CR_ADCAL; // Begin calibration.
	while(ADC1->CR & ADC_CR_ADCAL); // Wait for calibration to complete. (ADCAL goes to zero)
	ADC1->DIFSEL &= ~(ADC_DIFSEL_DIFSEL_5); //* PA0 is ADC_IN5, Single Ended Mode

	//-------------- ADC ENABLE --------------//
	ADC1->ISR |= ADC_ISR_ADRDY; // Clear the ADRDY flag
	ADC1->CR |= ADC_CR_ADEN; // ADC Enable Control
//	ADC1->IER |= ADC_IER_ADRDYIE; // ADC Ready interrupt EN
	while (!(ADC1->ISR & ADC_ISR_ADRDY)); // Wait for ADC Ready
	ADC1->ISR |= ADC_ISR_ADRDY; // Clear the ADRDY flag

	ADC1->SQR1 = (ADC1->SQR1 & ~(ADC_SQR1_SQ1_Msk | ADC_SQR1_L_Msk)) 	//* set sequence to 1 conversion on channel 5
					| (5 << ADC_SQR1_SQ1_Pos);

	//-------------- ADC INTERRUPTS ENABLE --------------//
	ADC1->IER &= ~(ADC_IER_EOC); // Enable EOC Interrupts.
//	ADC1->ISR &= (ADC_ISR_EOC); // Clear EOC Interrupt flag.
	NVIC->ISER[0] = (1 << (ADC1_2_IRQn & 0x1F)); // Enable vector Interrupts

	//-------------- GPIO PA0 SETUP --------------//
	GPIOA->AFR[0] = (GPIOA->AFR[0] & ~(GPIO_AFRL_AFSEL0)) | (7 << GPIO_AFRL_AFSEL0_Pos); // *
	GPIOA->MODER |= (GPIO_MODER_MODE0); // Set PA0 to Analog mode.
	GPIOA->ASCR |= GPIO_ASCR_ASC0; // Connect analog switch to the ADC input.

	ADC1->CFGR |= (ADC_CFGR_DMAEN); // Enable DMA Mode
	ADC1->CFGR |= (ADC_CFGR_DMACFG);	// Enable Circular DMA Mode
	ADC1->CFGR |= (ADC_CFGR_CONT);

	ADC1->CR |= ADC_CR_ADSTART;		// Start ADC conversion
}

void DMA_ADC_Init(void) {

	//-------------- DMA SETUP --------------//
	RCC->AHB1ENR |= (RCC_AHB1ENR_DMA1EN); // DMA1_Channel1 Clock EN

	DMA1_Channel1->CCR &= ~(DMA_CCR_EN); // Disable DMA
	DMA1_Channel1->CCR |= (DMA_CCR_CIRC); // Circular mode enabled.

	// MSIZE
	DMA1_Channel1->CCR &= ~(0x3<<10); // Clear MSIZE
	DMA1_Channel1->CCR |= (1<<10); // Set Data transfer size to 16bit
	// PSIZE
	DMA1_Channel1->CCR &= ~(0x3<<8); // Clear PSIZE
	DMA1_Channel1->CCR |= (1<<8); // Set Data transfer size to 16bit

	DMA1_Channel1->CCR &= ~(DMA_CCR_DIR);// DIR set to read from peripheral
	DMA1_Channel1->CPAR = &ADC1->DR; //* Set source address
	DMA1_Channel1->CMAR = (uint32_t)destArray; // Set destination address
	DMA1_Channel1->CNDTR = 1000; // Set number of items to transfer
	DMA1_Channel1->CCR |= DMA_CCR_MINC;
	DMA1_Channel1->CCR &= ~(DMA_CCR_PINC); // Set mem and peripheral increment modes
	DMA1_Channel1->CCR |= DMA_CCR_TEIE; // Set mem and peripheral increment modes
	DMA1_Channel1->CCR |= DMA_CCR_HTIE; // Enable transfer halfway complete interrupts
	DMA1_Channel1->CCR |= (DMA_CCR_TCIE); // Enable transfer complete interrupts
	DMA1_Channel1->CCR &= ~(DMA_CCR_MEM2MEM); // Disable Memory to Memory Mode
	NVIC->ISER[0] |= (1<<11); // Enable DMA1_CH1 NVIC

	DMA1_Channel1->CCR |= (1<<0); // Enable DMA

	ADC_Init();
//	while (dmaFlag != 1);
}

void DMA_Mem_Cpy(void) {
	  CPU_Copy();
	  for(int i = 0; i<100; i++) {} // Delay 100 ticks
	  memset(destArray, 0, sizeof(destArray));
	  DMA_Copy();
	  for(int i = 0; i<100; i++) {} // Delay 100 ticks
}

void DMA_Copy(void) {
	GPIOB->BSRR |= (1<<1); // Set PB1 high
	DMA1_Channel1->CCR |= (1<<0); // Enable DMA
	while (dmaFlag != 1);
	GPIOB->BRR |= (1<<1); // Set PB1 low
}

void CPU_Copy(void) {
	GPIOB->BSRR |= (1<<2); // Set PB2 high
    memcpy(destArray, sourceArray, 1000 * sizeof(uint16_t));
	GPIOB->BRR |= (1<<2); // Set PB2 low
}

void Fill_Array(void) {
    for(int i = 0; i < 1000; i++) {
        sourceArray[i] = i;
    }
}

void Clear_Array(void) {
    for(int i = 0; i < 1000; i++) {
        destArray[i] = 0;
    }
}

void DMA1_Channel1_IRQHandler(void) {
	// if x interrupt triggered
	// clear interrupt flag
	if (DMA1->ISR & DMA_ISR_TCIF1) {
	    DMA1->IFCR = DMA_IFCR_CTCIF1; // Clear transfer complete flag for Channel 1
	}
	if (DMA1->ISR & DMA_ISR_HTIF1) {
	    DMA1->IFCR = DMA_IFCR_CHTIF1; // Clear transfer complete flag for Channel 1
	}
	dmaFlag = 1;
//	DMA1_Channel1->CCR &= ~(1<<0); // Disable DMA

}

void DMA1_Channel1_TE_IRQHandler(void) {

	GPIOB->BRR |= (1<<1); // Set PB1 low
}

void DMA_CPU_Init(void) {
	RCC->AHB1ENR |= (RCC_AHB1ENR_DMA1EN); // DMA1_Channel1 Clock EN

	DMA1_Channel1->CCR &= ~(DMA_CCR_EN); // Disable DMA
	DMA1_Channel1->CCR &= ~(DMA_CCR_CIRC); // Circular mode must be disabled for mem2mem
	DMA1_Channel1->CCR &= ~(0x3<<10); // Clear MSIZE
	DMA1_Channel1->CCR |= (1<<10); // Set Data transfer size to 16bit
	DMA1_Channel1->CCR &= (DMA_CCR_DIR);// DIR set to default
	DMA1_Channel1->CPAR = (uint32_t)sourceArray;// Set source address
	DMA1_Channel1->CMAR = (uint32_t)destArray; // Set destination address
	DMA1_Channel1->CNDTR = 1000; // Set number of items to transfer
	DMA1_Channel1->CCR |= DMA_CCR_MINC | DMA_CCR_PINC; // Set mem and peripheral increment modes
	DMA1_Channel1->CCR |= DMA_CCR_TEIE; // Set mem and peripheral increment modes
	DMA1_Channel1->CCR |= (DMA_CCR_TCIE); // enable transfer complete interrupts
	DMA1_Channel1->CCR |= (DMA_CCR_MEM2MEM); // Enable Memory to Memory Mode
	NVIC->ISER[0] |= (1<<11); // Enable DMA1_CH1 NVIC
}

void GPIO_Init(void) {
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOBEN); // Enable GPIOB clock
	GPIOB->MODER &= ~(0x3<<4); // Clear PB2
	GPIOB->MODER |= (1<<4); // PB2 to output
	GPIOB->MODER &= ~(0x3<<2); // Clear PB1
	GPIOB->MODER |= (1<<2); // PB1 to output
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 10;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
