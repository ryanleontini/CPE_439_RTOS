/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "arm_math.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
void DMA_ADC_Init(void);
void TIM2_Init (void);
void Perform_FFT(void);
void GPIO_Init(void) ;

#define ARRAY_SIZE 256

uint16_t sourceArray[ARRAY_SIZE];
uint16_t destArray[ARRAY_SIZE];

static float32_t complexInput[ARRAY_SIZE];
static float32_t complexOutput[ARRAY_SIZE];
arm_cfft_radix4_instance_f32 S;

volatile int FFT_Flag = 0;

int main(void)
{

  HAL_Init();

  SystemClock_Config();

  MX_GPIO_Init();
  MX_USART2_UART_Init();

  DMA_ADC_Init();
  TIM2_Init();
  GPIO_Init();


	ADC1->CR |= ADC_CR_ADSTART; // start ADC (in triggered mode)
	TIM2->CR1 = TIM_CR1_CEN;    // start timer


	while(1) {
		if (FFT_Flag == 1) {
			Perform_FFT();
		}
	}
}

void Perform_FFT(void) {
	GPIOB->BRR |= (1<<2); // Set PB2 high

	arm_status status;
    status = arm_cfft_radix4_init_f32(&S, ARRAY_SIZE, 0, 1);
    if (status != ARM_MATH_SUCCESS) {
    	GPIOB->BRR |= (1<<2); // Set PB2 high
    }

    for (int i = 0; i < ARRAY_SIZE; i++) {
        complexInput[2 * i] = (float32_t)destArray[i]; // Real part
        complexInput[2 * i + 1] = 0.0f; // Imaginary part set to 0
    }

    arm_cfft_radix4_f32(&S, complexInput);
    arm_cmplx_mag_f32(complexInput, complexOutput, ARRAY_SIZE);

    float maxMagnitude = 0;
    uint32_t maxIndex = 0;

    for (int i = 0; i < ARRAY_SIZE; i++) {
        if (complexOutput[i] > maxMagnitude) {
            maxMagnitude = complexOutput[i];
            maxIndex = i;
        }
    }

    float adcClockFrequency = 4000000;
    float cyclesPerConversion = 2.5;
    float sampleRate = adcClockFrequency / cyclesPerConversion;
    float frequency = (sampleRate / ARRAY_SIZE) * maxIndex;


    char message[50];  // Adjust size as necessary
//	sprintf(message, "Frequency: %.2f Hz", frequency);  // %.2f controls the precision to 2 decimal places

	if(HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), 1000) != HAL_OK)
	{
	  // Transmission Error
	  Error_Handler();
	}
	HAL_Delay(1000); // Delay for 1 second to ensure data is sent before the next loop

	GPIOB->BRR &= ~(1<<2); // Set PB2 low

	FFT_Flag = 0;

}

void GPIO_Init(void) {

  	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN; // Enable GPIOA clock

	GPIOA->AFR[0] = (GPIOA->AFR[0] & ~(GPIO_AFRL_AFSEL0)) | (7 << GPIO_AFRL_AFSEL0_Pos); // *
	GPIOA->MODER |= (GPIO_MODER_MODE0); // Set PA0 to Analog mode.
	GPIOA->ASCR |= GPIO_ASCR_ASC0;
	GPIOA->MODER &= ~(0b01<<2); // Set PA1 to Alternate function mode.
	GPIOA->MODER |= (0b10<<2); // Set PA1 to Alternate function mode.
	GPIOA->AFR[0] = 0b1<<4; // A1 AF1

}
void TIM2_Init (void) {
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;

	// OC1M
	TIM2->PSC = 1; // set some prescaler
	TIM2->EGR = TIM_EGR_UG; // load prescaler
	TIM2->CR2 = TIM_CR2_MMS_1; // master mode 010: update
	TIM2->ARR = 1953; // set period
	TIM2->SR = 0; // clear update status caused by TIM_EGR_UG

	TIM2->CCR2 = 0;
	TIM2->CCMR1 |= (0b11 << 12) | (0 << 24) | (0b00 << 8);
	TIM2->CCER |= TIM_CCER_CC2E;
    TIM2->DIER |= TIM_DIER_UIE; // Enable Update interrupt
	NVIC_EnableIRQ(TIM2_IRQn);

}
void ADC_Init(void) {
	RCC->AHB2ENR |= RCC_AHB2ENR_ADCEN;
	ADC123_COMMON->CCR = ADC_CCR_CKMODE; // set a valid clock, hclk / 4
	ADC1->CR = 0; // clear sleep mode
	ADC1->CR;     // wait a bit
	ADC1->CR = ADC_CR_ADVREGEN; // enable ADC regulator
	HAL_Delay(100);
	ADC1->CR |= ADC_CR_ADEN; // enable ADC
	while(!(ADC1->ISR & ADC_ISR_ADRDY)) // wait for ADC ready
		;
	ADC1->IER |= ADC_IER_EOCIE; // enable EOC interrupt, just for control
	ADC1->IER |= ADC_IER_OVRIE; // enable EOC interrupt, just for control

	ADC1->SQR1 = (4 << ADC_SQR1_SQ1_Pos); // Channel 5 as the first and only conversion in the sequence

	ADC1->CFGR = ADC_CFGR_EXTEN_0 | // enable trigger on rising edge
			(3 << ADC_CFGR_EXTSEL_Pos); // Event 3 is TIM2_CH2

	ADC1->CFGR |= (ADC_CFGR_DMAEN); // Enable DMA Mode
	ADC1->CFGR &= ~(ADC_CFGR_DMACFG);	// Disable Circular DMA Mode

	// GPIO
	ADC1->DIFSEL &= ~(ADC_DIFSEL_DIFSEL_5); //* PA0 is ADC_IN5, Single Ended Mode
	NVIC_EnableIRQ(ADC1_IRQn);
}

void DMA_ADC_Init(void) {

	//-------------- DMA SETUP --------------//
	RCC->AHB1ENR |= (RCC_AHB1ENR_DMA1EN); // DMA1_Channel1 Clock EN

	DMA1_Channel1->CCR &= ~(DMA_CCR_EN); // Disable DMA
	DMA1_Channel1->CCR &= ~DMA_CCR_CIRC; // Circular mode disabled.

	// MSIZE
	DMA1_Channel1->CCR &= ~(0x3<<10); // Clear MSIZE
	DMA1_Channel1->CCR |= (1<<10); // Set Data transfer size to 16bit
	// PSIZE
	DMA1_Channel1->CCR &= ~(0x3<<8); // Clear PSIZE
	DMA1_Channel1->CCR |= (1<<8); // Set Data transfer size to 16bit

	DMA1_Channel1->CCR &= ~(DMA_CCR_DIR);// DIR set to read from peripheral
	DMA1_Channel1->CPAR = (uint32_t) &ADC1->DR; //* Set source address
	DMA1_Channel1->CMAR = (uint32_t) destArray; // Set destination address
	DMA1_Channel1->CNDTR = ARRAY_SIZE; // Set number of items to transfer
	DMA1_Channel1->CCR |= DMA_CCR_MINC; // Set mem increment modes
	DMA1_Channel1->CCR &= ~(DMA_CCR_PINC); // Set peripheral increment modes
	DMA1_Channel1->CCR |= DMA_CCR_TEIE;
	DMA1_Channel1->CCR &= ~DMA_CCR_HTIE; // Enable transfer halfway complete interrupts
	DMA1_Channel1->CCR |= (DMA_CCR_TCIE); // Enable transfer complete interrupts
	DMA1_Channel1->CCR &= ~(DMA_CCR_MEM2MEM); // Disable Memory to Memory Mode

	NVIC->ISER[0] |= (1<<11); // Enable DMA1_CH1 NVIC
    NVIC_SetPriority(DMA1_Channel1_IRQn, 0);  // Set DMA interrupt to higher priority than ADC

    DMA1_Channel1->CCR |= (1<<0); // Enable DMA
    ADC_Init();
}

void DMA1_Channel1_IRQHandler() {
	if (DMA1->ISR & DMA_ISR_TCIF1) {
	    DMA1->IFCR |= DMA_IFCR_CTCIF1;
	    FFT_Flag = 1;
	}
	if (DMA1->ISR & DMA_ISR_TEIF1) {
	    DMA1->IFCR |= DMA_IFCR_CTEIF1;
	}
}

void TIM2_IRQHandler() {
    if (TIM2->SR & TIM_SR_UIF) { // If UIF occurs, set PA4 high
		TIM2->SR &= ~(TIM_SR_UIF);
    }
}

void ADC1_IRQHandler() {
	if (ADC1->ISR & ADC_ISR_OVR) {
		ADC1->ISR = ADC_ISR_OVR;
	}
	if (ADC1->ISR & ADC_ISR_EOC) {
//		uint32_t adcValue = ADC1->DR;
		ADC1->ISR = ADC_ISR_EOC;
	}
	if (ADC1->ISR & ADC_ISR_EOS) {
		ADC1->ISR = ADC_ISR_EOS;
	}
//	ADC1->ISR = ADC_ISR_EOC; // clear interrupt flag
//	GPIOB->ODR ^= 1; // toggle green
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 10;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
