/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "arm_math.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void DMA_ADC_Init(void);
void TIM2_Init (void);
void GPIO_Init(void);
void ADC_Init(void);
void Perform_FFT(float32_t * floatConversions, arm_rfft_fast_instance_f32 fftHandler);

#define INT16_TO_FLOAT 0.00003051757f
#define FLOAT_TO_INT16 32768.0f
#define SAMPLE_RATE_HZ 2048.0f

#define ARRAY_SIZE 2048

uint32_t sourceArray[ARRAY_SIZE];
uint32_t destArray[ARRAY_SIZE];

arm_rfft_fast_instance_f32 fftHandler;

//float fftBufIn[ARRAY_SIZE];
float32_t fftBufOut[ARRAY_SIZE * 2];
float32_t fftBufMag[ARRAY_SIZE];

uint32_t FreqIndex = 0;
float32_t MaxFreq = 0;

int FFT_Flag = 0;

int main(void)
{

	HAL_Init();

	SystemClock_Config();

	GPIO_Init();
	DMA_ADC_Init();
	TIM2_Init();
    ADC_Init();


	arm_rfft_fast_init_f32(&fftHandler, ARRAY_SIZE);

	float32_t floatConversions[ARRAY_SIZE];


	while(1) {
		if (FFT_Flag == 1) {
//			Perform_FFT(floatConversions, fftHandler);

			for (int i = 0; i < ARRAY_SIZE; i++) {
				floatConversions[i] = (float32_t) destArray[i];
			}
			GPIOB->BSRR |= (GPIO_BSRR_BS2); // Set PB2 high
			arm_rfft_fast_f32(&fftHandler, floatConversions, fftBufOut, 0); // FFT
			arm_cmplx_mag_squared_f32(fftBufOut, fftBufMag, ARRAY_SIZE); // Complex Mag
			fftBufMag[0] = 0; // Zero the DC mag
			arm_max_f32(fftBufMag, ARRAY_SIZE, &MaxFreq, &FreqIndex); // Max
			float32_t freq = (uint32_t) FreqIndex;

			GPIOB->BRR |= (GPIO_BRR_BR2); // Set PB2 low

			TIM2->CR1 |= TIM_CR1_CEN;    // start timer
		}
	}
}

void Perform_FFT(float32_t * floatConversions, arm_rfft_fast_instance_f32 fftHandler) {
// Set PB2 low

}

void GPIO_Init(void) {

  	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOAEN | RCC_AHB2ENR_GPIOBEN | RCC_AHB2ENR_GPIOCEN); // Enable GPIOA clock

	/* PB2 INIT */
	GPIOB->MODER &= ~(GPIO_MODER_MODE2_Msk);
	GPIOB->MODER |= (GPIO_MODER_MODE2_0);		// PB2 Output

  	// Pin A0
	GPIOA->AFR[0] = (GPIOA->AFR[0] & ~(GPIO_AFRL_AFSEL0)) | (7 << GPIO_AFRL_AFSEL0_Pos); // *
	GPIOA->MODER |= (GPIO_MODER_MODE0); // Set PA0 to Analog mode.
	GPIOA->ASCR |= GPIO_ASCR_ASC0;

	// UART PA2 PA3 Pins


}
void TIM2_Init (void) {
//
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;

	TIM2->ARR = 2;
	TIM2->CCR2 = 1;

	TIM2->CCMR1 &= ~(TIM_CCMR1_OC2M);
	TIM2->CCMR1 |= (0x6 << TIM_CCMR1_OC2M_Pos);
	TIM2->CCMR1 &= ~(TIM_CCMR1_CC2S);
	TIM2->CCMR1 |= TIM_CCMR1_OC2PE;
	TIM2->CCER |= TIM_CCER_CC2E;
	TIM2->EGR = TIM_EGR_UG; // load prescaler

	TIM2->CR1 |= TIM_CR1_CEN;    // start timer

}
void ADC_Init(void) {

	RCC->AHB2ENR |= RCC_AHB2ENR_ADCEN;
 	ADC123_COMMON->CCR = ((ADC123_COMMON->CCR & ~(ADC_CCR_CKMODE)) | ADC_CCR_CKMODE_0);
	ADC123_COMMON->CCR |= (ADC_CFGR_DMACFG);	// Enable Circular DMA Mode

	ADC1->CR &= ~(ADC_CR_DEEPPWD);
	ADC1->CR |= (ADC_CR_ADVREGEN);
	for (int i = 0; i<100000; i++) {}; // Delay ~20us to allow ADC voltage regulator startup.
	ADC1->CR &= ~(ADC_CR_ADEN | ADC_CR_ADCALDIF);	// ADC Not EN, ADC in Single Ended Mode.
	ADC1->CR |= ADC_CR_ADCAL; // Begin calibration.
	while(ADC1->CR & ADC_CR_ADCAL); // Wait for calibration to complete. (ADCAL goes to zero)

	ADC1->DIFSEL &= ~(ADC_DIFSEL_DIFSEL_5); //* PA0 is ADC_IN5, Single Ended Mode

	ADC1->ISR |= (ADC_ISR_ADRDY);
	ADC1->CR |= ADC_CR_ADEN; // Enable ADC
	while(!(ADC1->ISR & ADC_ISR_ADRDY)); // Wait for ADC ready
	ADC1->ISR |= (ADC_ISR_ADRDY);

	ADC1->SQR1 = ADC1->SQR1 = (ADC1->SQR1 & ~(ADC_SQR1_SQ1_Msk | ADC_SQR1_L_Msk)) | (5 << ADC_SQR1_SQ1_Pos); // Channel 5 as the first and only conversion in the sequence

	ADC1->CR &= ~ADC_CR_ADSTART; // Allow config
   	ADC1->CFGR &= ~(ADC_CFGR_CONT);
   	ADC1->CFGR &= ~(ADC_CFGR_RES);

	ADC1->CFGR |= (0x1 << ADC_CFGR_EXTEN_Pos);
	ADC1->CFGR |= (0x3 << ADC_CFGR_EXTSEL_Pos); // TIM2

	ADC1->CFGR |= (ADC_CFGR_DMACFG);	// Enable Circular DMA Mode
	ADC1->CFGR |= (ADC_CFGR_DMAEN); // Enable DMA Mode
	ADC1->SMPR1 |= 0x7 << ADC_SMPR1_SMP4_Pos; // 640.5 Cycles

	ADC1->CR |= ADC_CR_ADSTART; // Start ADC

}

void DMA_ADC_Init(void) {

	//-------------- DMA SETUP --------------//
	RCC->AHB1ENR |= (RCC_AHB1ENR_DMA1EN); // DMA1_Channel1 Clock EN

	DMA1_Channel1->CCR &= ~(DMA_CCR_EN); // Disable DMA
	DMA1_Channel1->CCR |= DMA_CCR_CIRC; // Circular mode disabled.

	// MSIZE
	DMA1_Channel1->CCR &= ~(0x3<<10); // Clear MSIZE
	DMA1_Channel1->CCR |= (1<<10); // Set Data transfer size to 16bit
	// PSIZE
	DMA1_Channel1->CCR &= ~(0x3<<8); // Clear PSIZE
	DMA1_Channel1->CCR |= (1<<8); // Set Data transfer size to 16bit

	DMA1_Channel1->CCR &= ~(DMA_CCR_DIR);// DIR set to read from peripheral
	DMA1_Channel1->CCR |= (DMA_CCR_PSIZE_0);// DIR set to read from peripheral
	DMA1_Channel1->CCR |= (DMA_CCR_MSIZE_1);// DIR set to read from peripheral
	DMA1_Channel1->CCR &= ~(DMA_CCR_DIR);// DIR set to read from peripheral

	DMA1_Channel1->CPAR = (uint32_t) &ADC1->DR; //* Set source address
	DMA1_Channel1->CMAR = (uint32_t) destArray; // Set destination address
	DMA1_Channel1->CNDTR = ARRAY_SIZE; // Set number of items to transfer
	DMA1_Channel1->CCR |= DMA_CCR_MINC; // Set mem increment modes
	DMA1_Channel1->CCR &= ~(DMA_CCR_PINC); // Set peripheral increment modes
	DMA1_Channel1->CCR |= (DMA_CCR_TCIE); // Enable transfer complete interrupts
	DMA1_Channel1->CCR &= ~(DMA_CCR_MEM2MEM); // Disable Memory to Memory Mode

    NVIC_EnableIRQ(DMA1_Channel1_IRQn);  // Set DMA interrupt to higher priority than ADC

    DMA1_Channel1->CCR |= (DMA_CCR_EN); // Enable DMA

}

void UART_Init() {
	RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;
}

void DMA1_Channel1_IRQHandler() {
	if (DMA1->ISR & DMA_ISR_TCIF1) {
	    DMA1->IFCR |= DMA_IFCR_CTCIF1;
	    FFT_Flag = 1;
//		ADC1->CR |= ADC_CR_ADDIS; // stop ADC (in triggered mode)
		TIM2->CR1 &= ~TIM_CR1_CEN;    // stop timer

//		TIM2->CR1 &= ~TIM_CR1_CEN;    // stop timer
	}
	if (DMA1->ISR & DMA_ISR_TEIF1) {
	    DMA1->IFCR |= DMA_IFCR_CTEIF1;
	}
}
//
//void TIM2_IRQHandler() {
//    if (TIM2->SR & TIM_SR_UIF) { // If UIF occurs, set PA4 high
//		TIM2->SR &= ~(TIM_SR_UIF);
////		GPIOB->ODR ^= (1 << 2); // Toggle PB2
//    }
//}
//
//void ADC1_IRQHandler() {
//	if (ADC1->ISR & ADC_ISR_OVR) {
//		ADC1->ISR = ADC_ISR_OVR;
//	}
//	if (ADC1->ISR & ADC_ISR_EOC) {
////		uint32_t adcValue = ADC1->DR;
//		ADC1->ISR = ADC_ISR_EOC;
//	}
//	if (ADC1->ISR & ADC_ISR_EOS) {
//		ADC1->ISR = ADC_ISR_EOS;
//	}
////	ADC1->ISR = ADC_ISR_EOC; // clear interrupt flag
////	GPIOB->ODR ^= 1; // toggle green
//}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 10;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
//static void MX_USART2_UART_Init(void)
//{
//
//  /* USER CODE BEGIN USART2_Init 0 */
//
//  /* USER CODE END USART2_Init 0 */
//
//  /* USER CODE BEGIN USART2_Init 1 */
//
//  /* USER CODE END USART2_Init 1 */
//  huart2.Instance = USART2;
//  huart2.Init.BaudRate = 115200;
//  huart2.Init.WordLength = UART_WORDLENGTH_8B;
//  huart2.Init.StopBits = UART_STOPBITS_1;
//  huart2.Init.Parity = UART_PARITY_NONE;
//  huart2.Init.Mode = UART_MODE_TX_RX;
//  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
//  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
//  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
//  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
//  if (HAL_UART_Init(&huart2) != HAL_OK)
//  {
//    Error_Handler();
//  }
//  /* USER CODE BEGIN USART2_Init 2 */
//
//  /* USER CODE END USART2_Init 2 */
//
//}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
//  */
//static void MX_GPIO_Init(void)
//{
//  GPIO_InitTypeDef GPIO_InitStruct = {0};
///* USER CODE BEGIN MX_GPIO_Init_1 */
///* USER CODE END MX_GPIO_Init_1 */
//
//  /* GPIO Ports Clock Enable */
//  __HAL_RCC_GPIOC_CLK_ENABLE();
//  __HAL_RCC_GPIOH_CLK_ENABLE();
//  __HAL_RCC_GPIOA_CLK_ENABLE();
//  __HAL_RCC_GPIOB_CLK_ENABLE();
//
//  /*Configure GPIO pin Output Level */
//  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
//
//  /*Configure GPIO pin : B1_Pin */
//  GPIO_InitStruct.Pin = B1_Pin;
//  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
//  GPIO_InitStruct.Pull = GPIO_NOPULL;
//  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
//
//  /*Configure GPIO pin : LD2_Pin */
//  GPIO_InitStruct.Pin = LD2_Pin;
//  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
//  GPIO_InitStruct.Pull = GPIO_NOPULL;
//  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
//
///* USER CODE BEGIN MX_GPIO_Init_2 */
///* USER CODE END MX_GPIO_Init_2 */
//}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
