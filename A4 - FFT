
#include "main.h"
#include "arm_math.h"
#include "stdio.h"

void SystemClock_Config(void);

void DMA_ADC_Init(void);
void TIM2_Init (void);
void GPIO_Init(void);
void ADC_Init(void);
void USART2_Init(void);
void USART2_Print( char * message );

#define SAMPLING_RATE 2048  // Sampling rate in Hz
#define SINE_WAVE_FREQ 512    // Frequency of the sine wave in Hz
#define PI 3.14159f

#define BAUD_RATE 115200
#define USART_CLOCK 32000000

#define ARRAY_SIZE 2048

#define ADC_MAX 4095
#define Vref 3.3

volatile uint32_t sourceArray[ARRAY_SIZE];
volatile uint32_t destArray[ARRAY_SIZE];
float32_t freq;

arm_rfft_fast_instance_f32 fftHandler;

//float fftBufIn[ARRAY_SIZE];
volatile float32_t fftBufOut[ARRAY_SIZE * 2];
volatile float32_t fftBufMag[ARRAY_SIZE];

volatile uint32_t FreqIndex = 0;
volatile float32_t MaxFreq = 0;

int FFT_Flag = 0;

void generateSineWave(float32_t *signal, uint32_t signalLength) {
    for (int i = 0; i < signalLength; i++) {
        signal[i] = 0.5f * arm_sin_f32((2 * PI * SINE_WAVE_FREQ * i) / ARRAY_SIZE);
    }
}

int main(void)
{
	arm_rfft_fast_init_f32(&fftHandler, ARRAY_SIZE);

	HAL_Init();

	SystemClock_Config();

	GPIO_Init();
    USART2_Init();

	DMA_ADC_Init();
	TIM2_Init();
    ADC_Init();



	float32_t floatConversions[ARRAY_SIZE];
	char message[100] = {0};

	int messageLen = 100;


	while(1) {
		if (FFT_Flag == 1) {
		    printf("Data\n");

		    for (int i = 0; i < ARRAY_SIZE; i++) {
//				floatConversions[i] = (float32_t) destArray[i];
				floatConversions[i] = (float32_t)destArray[i] * (Vref / ADC_MAX);

		    }

//	        generateSineWave(floatConversions, ARRAY_SIZE);  // For testing.

	        GPIOB->BSRR |= (GPIO_BSRR_BS2); // Set PB2 high
			arm_rfft_fast_f32(&fftHandler, floatConversions, fftBufOut, 0); // FFT
			GPIOB->BRR |= (GPIO_BRR_BR2); // Set PB2 low (measure FFT time)

			arm_cmplx_mag_squared_f32(fftBufOut, fftBufMag, ARRAY_SIZE / 2); // Complex Mag
			fftBufMag[0] = 0; // Zero the DC mag
			arm_max_f32(fftBufMag, ARRAY_SIZE, &MaxFreq, &FreqIndex); // Max
//			float32_t freq = (uint32_t) FreqIndex * 1000;
			freq = ((float32_t) SAMPLING_RATE * (float32_t) FreqIndex) / ((float32_t) ARRAY_SIZE);


			snprintf(message, messageLen, "Frequency: %.0fHZ", freq);

			USART2_Print("\x1B[H\x1B[2K"); // Move to the first line and clear it
			USART2_Print("\x1B[H"); // Move cursor to the top left of the screen
//			USART2_Print("\x1B[1;12H"); // Move the cursor to the end of frequency setup.

			GPIOB->BSRR |= (GPIO_BSRR_BS1); // Set PB1 high
			USART2_Print(message);
			GPIOB->BRR |= (GPIO_BRR_BR1); // Set PB1 low (measure UART time)

			FFT_Flag = 0;
//			TIM2->CR1 |= TIM_CR1_CEN;    // start timer
			DMA1_Channel1->CCR |= (DMA_CCR_TCIE);
		}
	}
}

void GPIO_Init(void) {

  	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOAEN | RCC_AHB2ENR_GPIOBEN | RCC_AHB2ENR_GPIOCEN); // Enable GPIOA clock

	/* PB2 INIT */
	GPIOB->MODER &= ~(GPIO_MODER_MODE2_Msk);
	GPIOB->MODER |= (GPIO_MODER_MODE2_0);		// PB2 Output

	/* PB1 INIT */
	GPIOB->MODER &= ~(GPIO_MODER_MODE1_Msk);
	GPIOB->MODER |= (GPIO_MODER_MODE1_0);		// PB1 Output

  	/*  Pin A0 */
//	GPIOA->AFR[0] = (GPIOA->AFR[0] & ~(GPIO_AFRL_AFSEL0)) | (7 << GPIO_AFRL_AFSEL0_Pos); // *
	GPIOA->MODER |= (GPIO_MODER_MODE0); // Set PA0 to Analog mode.
	GPIOA->ASCR |= GPIO_ASCR_ASC0;

	/* UART PA2 PA3 Pins */
	GPIOA->MODER &= ~(GPIO_MODER_MODER2 | GPIO_MODER_MODER3);
	GPIOA->MODER |= (GPIO_MODER_MODER2_1 | GPIO_MODER_MODER3_1);
	GPIOA->AFR[0] |= 0x7700;

	GPIOA->OSPEEDR |= (GPIO_OSPEEDER_OSPEEDR2 | GPIO_OSPEEDER_OSPEEDR3); // High Speed
	GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPDR2 | GPIO_PUPDR_PUPDR3); // No pull-up, pull-down

    GPIOA->MODER &= ~(GPIO_MODER_MODE1_Msk); // Clear mode bits for PA1
    GPIOA->MODER |= GPIO_MODER_MODE1_1;      // Set mode to Alternate Function
    GPIOA->AFR[0] &= ~(GPIO_AFRL_AFSEL1_Msk); // Clear alternate function bits for PA1
    GPIOA->AFR[0] |= (1 << GPIO_AFRL_AFSEL1_Pos); // Set alternate function to AF1 (TIM2_CH2)
}

void TIM2_Init (void) {

	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;

	TIM2->ARR = 15880; // Set ARR
//	TIM2->PSC = 2;
	TIM2->CCR2 = 1; // Set CCR2

	TIM2->CCMR1 &= ~(TIM_CCMR1_OC2M); // Clear OC2M
	TIM2->CCMR1 |= (0x6 << TIM_CCMR1_OC2M_Pos); // Set OC2M to PWM
	TIM2->CCMR1 &= ~(TIM_CCMR1_CC2S); // Set to output
	TIM2->CCER |= TIM_CCER_CC2E; // Enable Capture Mode
	TIM2->CCMR1 |= TIM_CCMR1_OC2PE; // Enable Preload
	TIM2->EGR = TIM_EGR_UG; // Load Prescaler

	TIM2->CR1 |= TIM_CR1_CEN;    // Start TIM2

}

void ADC_Init(void) {

	RCC->AHB2ENR |= RCC_AHB2ENR_ADCEN; // Enable ADC Clock
 	ADC123_COMMON->CCR = ((ADC123_COMMON->CCR & ~(ADC_CCR_CKMODE)) | ADC_CCR_CKMODE_0);
	ADC123_COMMON->CCR |= (ADC_CFGR_DMACFG);	// Enable Circular Mode

	ADC1->CR &= ~(ADC_CR_DEEPPWD); // ADC Power
	ADC1->CR |= (ADC_CR_ADVREGEN);	// ADC Voltage Regulator Enable
	for (int i = 0; i<100000; i++) {}; // Delay ~20us to allow ADC voltage regulator startup.
	ADC1->CR &= ~(ADC_CR_ADEN | ADC_CR_ADCALDIF);	// ADC Not EN, ADC in Single Ended Mode.
	ADC1->CR |= ADC_CR_ADCAL; // Start calibrating.
	while(ADC1->CR & ADC_CR_ADCAL); // Wait for calibration.

	ADC1->DIFSEL &= ~(ADC_DIFSEL_DIFSEL_5); //  ADC_IN5, Single Ended

	ADC1->ISR |= (ADC_ISR_ADRDY); // Clear ADRDY Flag
	ADC1->CR |= ADC_CR_ADEN; // Enable ADC
	while(!(ADC1->ISR & ADC_ISR_ADRDY)); // Wait for ADC Ready
	ADC1->ISR |= (ADC_ISR_ADRDY); //Clear ADRDY Flag

	ADC1->SQR1 = ADC1->SQR1 = (ADC1->SQR1 & ~(ADC_SQR1_SQ1_Msk | ADC_SQR1_L_Msk)) | (5 << ADC_SQR1_SQ1_Pos); // Channel 5 as the first and only conversion in the sequence

	ADC1->CR &= ~ADC_CR_ADSTART; // Allow config
   	ADC1->CFGR &= ~(ADC_CFGR_CONT); // Not continuous mode
   	ADC1->CFGR &= ~(ADC_CFGR_RES);

	ADC1->CFGR |= (0x1 << ADC_CFGR_EXTEN_Pos);
	ADC1->CFGR |= (0x3 << ADC_CFGR_EXTSEL_Pos); // TIM2

	ADC1->CFGR |= (ADC_CFGR_DMACFG);	// Enable Circular DMA Mode
	ADC1->CFGR |= (ADC_CFGR_DMAEN); // Enable DMA Mode
	ADC1->SMPR1 |= 0x3 << ADC_SMPR1_SMP4_Pos; // Adjust Num Cycles

	ADC1->CR |= ADC_CR_ADSTART; // Start ADC

}

void DMA_ADC_Init(void) {

	//-------------- DMA SETUP --------------//
	RCC->AHB1ENR |= (RCC_AHB1ENR_DMA1EN); // DMA1_Channel1 Clock EN

	DMA1_Channel1->CCR &= ~(DMA_CCR_EN); // Disable DMA
	DMA1_Channel1->CCR |= DMA_CCR_CIRC; // Circular mode disabled.

	// MSIZE
	DMA1_Channel1->CCR &= ~(0x3<<10); // Clear MSIZE
	DMA1_Channel1->CCR |= (1<<10); // Set Data transfer size to 16bit
	// PSIZE
	DMA1_Channel1->CCR &= ~(0x3<<8); // Clear PSIZE
	DMA1_Channel1->CCR |= (1<<8); // Set Data transfer size to 16bit

	DMA1_Channel1->CCR &= ~(DMA_CCR_DIR);// DIR set to read from peripheral
	DMA1_Channel1->CCR |= (DMA_CCR_PSIZE_0);// DIR set to read from peripheral
	DMA1_Channel1->CCR |= (DMA_CCR_MSIZE_1);// DIR set to read from peripheral
	DMA1_Channel1->CCR &= ~(DMA_CCR_DIR);// DIR set to read from peripheral

	DMA1_Channel1->CPAR = (uint32_t) &ADC1->DR; //* Set source address
	DMA1_Channel1->CMAR = (uint32_t) destArray; // Set destination address
	DMA1_Channel1->CNDTR = ARRAY_SIZE; // Set number of items to transfer
	DMA1_Channel1->CCR |= DMA_CCR_MINC; // Set mem increment modes
	DMA1_Channel1->CCR &= ~(DMA_CCR_PINC); // Set peripheral increment modes
	DMA1_Channel1->CCR |= (DMA_CCR_TCIE); // Enable transfer complete interrupts
	DMA1_Channel1->CCR &= ~(DMA_CCR_MEM2MEM); // Disable Memory to Memory Mode

    NVIC_EnableIRQ(DMA1_Channel1_IRQn);  // Set DMA interrupt to higher priority than ADC

    DMA1_Channel1->CCR |= (DMA_CCR_EN); // Enable DMA

}

void USART2_Print( char * message ) {
	int i;
	for(i=0; message[i] != 0; i++){
		while(!(USART2->ISR & USART_ISR_TXE));
		USART2->TDR = message[i];
	}
}


void USART2_Init(void) {
	RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;

	USART2->CR1 &= ~(USART_CR1_M1 | USART_CR1_M0);
	USART2->BRR = USART_CLOCK / BAUD_RATE;
	USART2->CR1 |= USART_CR1_UE;
	USART2->CR1 |= (USART_CR1_TE | USART_CR1_RE); // TX and RX enabled

	char freqSetup[100] = {0};
	snprintf(freqSetup, 12, "Frequency: "); // Initial setup message
	USART2_Print("\x1B[2J"); // Clear the terminal
	USART2_Print("\x1B[H"); // Move cursor to the top left of the screen
	USART2_Print(freqSetup);

}

void DMA1_Channel1_IRQHandler() {
	if (DMA1->ISR & DMA_ISR_TCIF1) {
	    DMA1->IFCR |= DMA_IFCR_CTCIF1;
	    FFT_Flag = 1;
		DMA1_Channel1->CCR &= ~(DMA_CCR_TCIE); // Disable transfer complete interrupts

//		TIM2->CR1 &= ~TIM_CR1_CEN;    // stop timer

	}
	if (DMA1->ISR & DMA_ISR_TEIF1) {
	    DMA1->IFCR |= DMA_IFCR_CTEIF1;
	}
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;

	RCC_OscInitStruct.MSICalibrationValue = 0;
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;

	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
  {
    Error_Handler();
  }
}

int _write(int file, char *ptr, int len)
{
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
  {
	  ITM_SendChar(*ptr++);
  }
  return len;
}

void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
