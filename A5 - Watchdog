/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "cmsis_os.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
UART_HandleTypeDef huart2;

/* Definitions for defaultTask */
osThreadId_t defaultTaskHandle;
const osThreadAttr_t defaultTask_attributes = {
  .name = "defaultTask",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityNormal,
};
#define STACK_SIZE 128
#define INIT_DELAY 150

void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
void StartDefaultTask(void *argument);
void IWDG_Init(void);
void Counting_Task(void);
void GPIO_Init(void);
void TIM2_Init(void);
void EXTI_Init(void);

int main(void)
{

  HAL_Init();

  SystemClock_Config();

  MX_GPIO_Init();
  MX_USART2_UART_Init();
  TIM2_Init();
  GPIO_Init();
  EXTI_Init();



//  IWDG_Init();
//  GPIOB->BSRR |= (GPIO_BSRR_BS2);

//  osKernelInitialize();
//  osKernelStart();
//
  if (xTaskCreate(IWDG_Init, "WatchDog_Init", STACK_SIZE, NULL, tskIDLE_PRIORITY + 0, NULL) != pdPASS){ while(1); }
  if (xTaskCreate(Counting_Task, "Counting_Task", STACK_SIZE, NULL, tskIDLE_PRIORITY + 4, NULL) != pdPASS){ while(1); }

  vTaskStartScheduler();

  while (1)
  {
//	  EXTI->SWIER1 |= (EXTI_SWIER1_SWI13);
  }
  /* USER CODE END 3 */
}


void IWDG_Init(void) {
	for (int i = 0; i < 5; i++) {
		GPIOA->BSRR |= (GPIO_BSRR_BS5);
		HAL_Delay(500);
//		for (int i = 0; i < 10000; i++) { }
		GPIOA->BRR |= (GPIO_BRR_BR5);
		HAL_Delay(500);
//		for (int i = 0; i < 10000; i++) { }
	}

	/* Init Watchdog */
	IWDG->KR = (0x0000CCCC);

	IWDG->KR = (0x00005555);
//	IWDG->PR &= ~(IWDG_PR_PR_Msk);
	IWDG->PR |= (0b111 << (IWDG_PR_PR_Pos)); // PSC 6

    IWDG->KR = 0x00005555; // Step 4
    // Timeout Formula: tLSI x 4 x 2^PR x (RL + 1)
    // Where tLSI = 1/32000
    // RLL = (5000 x 32000) / ((4x2^PSC) x 1000) - 1
    // PSC = 6
    // RLL = 624
    IWDG->RLR = 0x270;    // Step 4

    while (IWDG->SR != 0x00000000); // Step 5
    IWDG->KR = 0x0000AAAA; // Step 6

	/* Delete task */
}

void Counting_Task(void) {
    const TickType_t xDelay = 10000 / portTICK_PERIOD_MS; // 10ms delay

	for (;;) {
		GPIOB->ODR ^= GPIO_PIN_2; // Toggle PB2

		vTaskDelay( xDelay ); // Delay for 10ms
	}
}

void TIM2_IRQHandler() {
    if (TIM2->SR & TIM_SR_UIF) {
		TIM2->SR &= ~(TIM_SR_UIF);
//		GPIOB->ODR ^= (1 << 2); // Toggle PB2
    }
}

void TIM2_Init(void) {
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;

	// OC1M
	TIM2->PSC = 1; // set some prescaler
	TIM2->ARR = 400000; // set period to 10ms

    TIM2->DIER |= TIM_DIER_UIE; // Enable Update interrupt
	NVIC_EnableIRQ(TIM2_IRQn);
	TIM2->CR1 |= TIM_CR1_CEN;    // Start TIM2
}

void EXTI15_10_IRQHandler(void) {
	/* Check that the pin is set */
	EXTI->PR1 |= (EXTI_PR1_PIF13); // Clear EXTI pending flag.
	if (GPIOC->IDR & GPIO_ODR_OD13) { // If PC13 high
		/* Reset watchdog */
        IWDG->KR = 0x0000AAAA;

		GPIOA->BSRR |= (GPIO_BSRR_BS5);
	}
}

void EXTI_Init(void) {
	/*************>>>>>>> STEPS FOLLOWED <<<<<<<<************

	1. Enable the SYSCNFG bit in RCC register
	2. Configure the EXTI configuration Register in the SYSCNFG
	3. Enable the EXTI using Interrupt Mask Register (IMR)
	4. Configure the Rising Edge / Falling Edge Trigger
	5. Set the Interrupt Priority
	6. Enable the interrupt

	********************************************************/

	RCC->APB2ENR |= (RCC_APB2ENR_SYSCFGEN);  // Enable SYSCNFG

	SYSCFG->EXTICR[3] &= ~(SYSCFG_EXTICR4_EXTI13_Msk);  // Bits[11:10:9:8] = (0:0:1:0)  -> configure EXTICR4 to access PC13
	SYSCFG->EXTICR[3] |= (1<<5);

	EXTI->IMR1 |= (EXTI_IMR1_IM13);  // Bit[1] = 1  --> Enable the Mask on EXTI 1
	EXTI->RTSR1 |= (EXTI_RTSR1_RT13);  // Enable Rising Edge Trigger for PC13

//	NVIC_SetPriority (EXTI4_IRQn, 0);  // Set Priority

	NVIC_EnableIRQ (EXTI15_10_IRQn);  // Enable Interrupt


}

void GPIO_Init(void) {
  	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOAEN | RCC_AHB2ENR_GPIOBEN | RCC_AHB2ENR_GPIOCEN); // Enable GPIOB clock

	/* PA5 LD2 INIT */
	GPIOA->MODER &= ~(GPIO_MODER_MODE5_Msk);
	GPIOA->MODER |= (GPIO_MODER_MODE5_0);		// PA5 Output

	/* PB2 INIT */
	GPIOB->MODER &= ~(GPIO_MODER_MODE2_Msk);
	GPIOB->MODER |= (GPIO_MODER_MODE2_0);		// PB2 Output

	/* PC13 USER BTN1 INIT */
	GPIOC->MODER &= ~(GPIO_MODER_MODE13_Msk); 	// PC13 Input

	GPIOC->PUPDR &= ~(GPIO_PUPDR_PUPD13_Msk);
	GPIOC->PUPDR |= (GPIO_PUPDR_PUPD13_1);		// PC13 Pull down resistor

}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 10;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/* USER CODE BEGIN Header_StartDefaultTask */
/**
  * @brief  Function implementing the defaultTask thread.
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
  }
  /* USER CODE END 5 */
}

/**
  * @brief  Period elapsed callback in non blocking mode
  * @note   This function is called  when TIM6 interrupt took place, inside
  * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
